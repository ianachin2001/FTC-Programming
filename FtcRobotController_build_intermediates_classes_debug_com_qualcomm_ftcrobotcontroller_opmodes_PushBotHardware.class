//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor.Direction;
import com.qualcomm.robotcore.hardware.DcMotorController.RunMode;
import com.qualcomm.robotcore.util.Range;

public class PushBotHardware extends OpMode {
    private boolean v_warning_generated = false;
    private String v_warning_message;
    private DcMotor v_motor_left_drive;
    private DcMotor v_motor_right_drive;
    private DcMotor v_motor_left_arm;
    private Servo v_servo_left_hand;
    private Servo v_servo_right_hand;

    public PushBotHardware() {
    }

    public void init() {
        this.v_warning_generated = false;
        this.v_warning_message = "Can\'t map; ";

        try {
            this.v_motor_left_drive = (DcMotor)this.hardwareMap.dcMotor.get("left_drive");
        } catch (Exception var8) {
            this.m_warning_message("left_drive");
            DbgLog.msg(var8.getLocalizedMessage());
            this.v_motor_left_drive = null;
        }

        try {
            this.v_motor_right_drive = (DcMotor)this.hardwareMap.dcMotor.get("right_drive");
            this.v_motor_right_drive.setDirection(Direction.REVERSE);
        } catch (Exception var7) {
            this.m_warning_message("right_drive");
            DbgLog.msg(var7.getLocalizedMessage());
            this.v_motor_right_drive = null;
        }

        try {
            this.v_motor_left_arm = (DcMotor)this.hardwareMap.dcMotor.get("left_arm");
        } catch (Exception var6) {
            this.m_warning_message("left_arm");
            DbgLog.msg(var6.getLocalizedMessage());
            this.v_motor_left_arm = null;
        }

        double l_hand_position = 0.5D;

        try {
            this.v_servo_left_hand = (Servo)this.hardwareMap.servo.get("left_hand");
            this.v_servo_left_hand.setPosition(l_hand_position);
        } catch (Exception var5) {
            this.m_warning_message("left_hand");
            DbgLog.msg(var5.getLocalizedMessage());
            this.v_servo_left_hand = null;
        }

        try {
            this.v_servo_right_hand = (Servo)this.hardwareMap.servo.get("right_hand");
            this.v_servo_right_hand.setPosition(l_hand_position);
        } catch (Exception var4) {
            this.m_warning_message("right_hand");
            DbgLog.msg(var4.getLocalizedMessage());
            this.v_servo_right_hand = null;
        }

    }

    boolean a_warning_generated() {
        return this.v_warning_generated;
    }

    String a_warning_message() {
        return this.v_warning_message;
    }

    void m_warning_message(String p_exception_message) {
        if(this.v_warning_generated) {
            this.v_warning_message = this.v_warning_message + ", ";
        }

        this.v_warning_generated = true;
        this.v_warning_message = this.v_warning_message + p_exception_message;
    }

    public void start() {
    }

    public void loop() {
    }

    public void stop() {
    }

    float scale_motor_power(float p_power) {
        float l_scale = 0.0F;
        float l_power = Range.clip(p_power, -1.0F, 1.0F);
        float[] l_array = new float[]{0.0F, 0.05F, 0.09F, 0.1F, 0.12F, 0.15F, 0.18F, 0.24F, 0.3F, 0.36F, 0.43F, 0.5F, 0.6F, 0.72F, 0.85F, 1.0F, 1.0F};
        int l_index = (int)((double)l_power * 16.0D);
        if(l_index < 0) {
            l_index = -l_index;
        } else if(l_index > 16) {
            l_index = 16;
        }

        if(l_power < 0.0F) {
            l_scale = -l_array[l_index];
        } else {
            l_scale = l_array[l_index];
        }

        return l_scale;
    }

    double a_left_drive_power() {
        double l_return = 0.0D;
        if(this.v_motor_left_drive != null) {
            l_return = this.v_motor_left_drive.getPower();
        }

        return l_return;
    }

    double a_right_drive_power() {
        double l_return = 0.0D;
        if(this.v_motor_right_drive != null) {
            l_return = this.v_motor_right_drive.getPower();
        }

        return l_return;
    }

    void set_drive_power(double p_left_power, double p_right_power) {
        if(this.v_motor_left_drive != null) {
            this.v_motor_left_drive.setPower(p_left_power);
        }

        if(this.v_motor_right_drive != null) {
            this.v_motor_right_drive.setPower(p_right_power);
        }

    }

    public void run_using_left_drive_encoder() {
        if(this.v_motor_left_drive != null) {
            this.v_motor_left_drive.setChannelMode(RunMode.RUN_USING_ENCODERS);
        }

    }

    public void run_using_right_drive_encoder() {
        if(this.v_motor_right_drive != null) {
            this.v_motor_right_drive.setChannelMode(RunMode.RUN_USING_ENCODERS);
        }

    }

    public void run_using_encoders() {
        this.run_using_left_drive_encoder();
        this.run_using_right_drive_encoder();
    }

    public void run_without_left_drive_encoder() {
        if(this.v_motor_left_drive != null && this.v_motor_left_drive.getChannelMode() == RunMode.RESET_ENCODERS) {
            this.v_motor_left_drive.setChannelMode(RunMode.RUN_WITHOUT_ENCODERS);
        }

    }

    public void run_without_right_drive_encoder() {
        if(this.v_motor_right_drive != null && this.v_motor_right_drive.getChannelMode() == RunMode.RESET_ENCODERS) {
            this.v_motor_right_drive.setChannelMode(RunMode.RUN_WITHOUT_ENCODERS);
        }

    }

    public void run_without_drive_encoders() {
        this.run_without_left_drive_encoder();
        this.run_without_right_drive_encoder();
    }

    public void reset_left_drive_encoder() {
        if(this.v_motor_left_drive != null) {
            this.v_motor_left_drive.setChannelMode(RunMode.RESET_ENCODERS);
        }

    }

    public void reset_right_drive_encoder() {
        if(this.v_motor_right_drive != null) {
            this.v_motor_right_drive.setChannelMode(RunMode.RESET_ENCODERS);
        }

    }

    public void reset_drive_encoders() {
        this.reset_left_drive_encoder();
        this.reset_right_drive_encoder();
    }

    int a_left_encoder_count() {
        int l_return = 0;
        if(this.v_motor_left_drive != null) {
            l_return = this.v_motor_left_drive.getCurrentPosition();
        }

        return l_return;
    }

    int a_right_encoder_count() {
        int l_return = 0;
        if(this.v_motor_right_drive != null) {
            l_return = this.v_motor_right_drive.getCurrentPosition();
        }

        return l_return;
    }

    boolean has_left_drive_encoder_reached(double p_count) {
        boolean l_return = false;
        if(this.v_motor_left_drive != null && (double)Math.abs(this.v_motor_left_drive.getCurrentPosition()) > p_count) {
            l_return = true;
        }

        return l_return;
    }

    boolean has_right_drive_encoder_reached(double p_count) {
        boolean l_return = false;
        if(this.v_motor_right_drive != null && (double)Math.abs(this.v_motor_right_drive.getCurrentPosition()) > p_count) {
            l_return = true;
        }

        return l_return;
    }

    boolean have_drive_encoders_reached(double p_left_count, double p_right_count) {
        boolean l_return = false;
        if(this.has_left_drive_encoder_reached(p_left_count) && this.has_right_drive_encoder_reached(p_right_count)) {
            l_return = true;
        }

        return l_return;
    }

    boolean drive_using_encoders(double p_left_power, double p_right_power, double p_left_count, double p_right_count) {
        boolean l_return = false;
        this.run_using_encoders();
        this.set_drive_power(p_left_power, p_right_power);
        if(this.have_drive_encoders_reached(p_left_count, p_right_count)) {
            this.reset_drive_encoders();
            this.set_drive_power(0.0D, 0.0D);
            l_return = true;
        }

        return l_return;
    }

    boolean has_left_drive_encoder_reset() {
        boolean l_return = false;
        if(this.a_left_encoder_count() == 0) {
            l_return = true;
        }

        return l_return;
    }

    boolean has_right_drive_encoder_reset() {
        boolean l_return = false;
        if(this.a_right_encoder_count() == 0) {
            l_return = true;
        }

        return l_return;
    }

    boolean have_drive_encoders_reset() {
        boolean l_return = false;
        if(this.has_left_drive_encoder_reset() && this.has_right_drive_encoder_reset()) {
            l_return = true;
        }

        return l_return;
    }

    double a_left_arm_power() {
        double l_return = 0.0D;
        if(this.v_motor_left_arm != null) {
            l_return = this.v_motor_left_arm.getPower();
        }

        return l_return;
    }

    void m_left_arm_power(double p_level) {
        if(this.v_motor_left_arm != null) {
            this.v_motor_left_arm.setPower(p_level);
        }

    }

    double a_hand_position() {
        double l_return = 0.0D;
        if(this.v_servo_left_hand != null) {
            l_return = this.v_servo_left_hand.getPosition();
        }

        return l_return;
    }

    void m_hand_position(double p_position) {
        double l_position = Range.clip(p_position, 0.0D, 1.0D);
        if(this.v_servo_left_hand != null) {
            this.v_servo_left_hand.setPosition(l_position);
        }

        if(this.v_servo_right_hand != null) {
            this.v_servo_right_hand.setPosition(1.0D - l_position);
        }

    }

    void open_hand() {
        if(this.v_servo_left_hand != null) {
            this.v_servo_left_hand.setPosition(1.0D);
        }

        if(this.v_servo_right_hand != null) {
            this.v_servo_right_hand.setPosition(0.0D);
        }

    }
}
