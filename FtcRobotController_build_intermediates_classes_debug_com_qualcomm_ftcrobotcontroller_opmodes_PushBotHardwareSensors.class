//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.ftcrobotcontroller.opmodes.PushBotTelemetry;
import com.qualcomm.robotcore.hardware.IrSeekerSensor;
import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.hardware.IrSeekerSensor.IrSeekerIndividualSensor;
import com.qualcomm.robotcore.util.Range;

public class PushBotHardwareSensors extends PushBotTelemetry {
    final int drive_to_ir_beacon_not_detected = -2;
    final int drive_to_ir_beacon_invalid = -1;
    final int drive_to_ir_beacon_running = 0;
    final int drive_to_ir_beacon_done = 1;
    private TouchSensor v_sensor_touch;
    private IrSeekerSensor v_sensor_ir;
    private OpticalDistanceSensor v_sensor_ods;

    public PushBotHardwareSensors() {
    }

    public void init() {
        super.init();

        try {
            this.v_sensor_touch = (TouchSensor)this.hardwareMap.touchSensor.get("sensor_touch");
        } catch (Exception var8) {
            this.m_warning_message("sensor_touch");
            DbgLog.msg(var8.getLocalizedMessage());
            this.v_sensor_touch = null;
        }

        try {
            this.v_sensor_ir = (IrSeekerSensor)this.hardwareMap.irSeekerSensor.get("sensor_ir");
        } catch (Exception var7) {
            this.m_warning_message("sensor_ir");
            DbgLog.msg(var7.getLocalizedMessage());
            this.v_sensor_ir = null;
        }

        try {
            this.v_sensor_ods = (OpticalDistanceSensor)this.hardwareMap.opticalDistanceSensor.get("sensor_ods");
        } catch (Exception var6) {
            try {
                this.v_sensor_ods = (OpticalDistanceSensor)this.hardwareMap.opticalDistanceSensor.get("sensor_eopd");
            } catch (Exception var5) {
                try {
                    this.v_sensor_ods = (OpticalDistanceSensor)this.hardwareMap.opticalDistanceSensor.get("sensor_EOPD");
                } catch (Exception var4) {
                    this.m_warning_message("sensor_ods/eopd/EOPD");
                    DbgLog.msg("Can\'t map sensor_ods nor sensor_eopd, nor sensor_EOPD (" + var4.getLocalizedMessage() + ").\n");
                    this.v_sensor_ods = null;
                }
            }
        }

    }

    boolean is_touch_sensor_pressed() {
        boolean l_return = false;
        if(this.v_sensor_touch != null) {
            l_return = this.v_sensor_touch.isPressed();
        }

        return l_return;
    }

    boolean move_arm_upward_until_touch() {
        if(this.is_touch_sensor_pressed()) {
            this.m_left_arm_power(0.0D);
        } else {
            this.m_left_arm_power(1.0D);
        }

        return this.is_touch_sensor_pressed();
    }

    double a_ir_angle() {
        double l_return = 0.0D;
        if(this.v_sensor_ir != null) {
            l_return = this.v_sensor_ir.getAngle();
        }

        return l_return;
    }

    double a_ir_strength() {
        double l_return = 0.0D;
        if(this.v_sensor_ir != null) {
            l_return = this.v_sensor_ir.getStrength();
        }

        return l_return;
    }

    IrSeekerIndividualSensor[] a_ir_angles_and_strengths() {
        IrSeekerIndividualSensor[] l_return = new IrSeekerIndividualSensor[]{new IrSeekerIndividualSensor(), new IrSeekerIndividualSensor()};
        if(this.v_sensor_ir != null) {
            l_return = this.v_sensor_ir.getIndividualSensors();
        }

        return l_return;
    }

    int drive_to_ir_beacon() {
        boolean l_return = true;
        double l_strength = this.a_ir_strength();
        byte l_return1;
        if(l_strength > 0.01D && l_strength < 0.2D) {
            double l_angle = this.a_ir_angle() / 240.0D;
            double l_left = Range.clip(0.15D + l_angle, -1.0D, 1.0D);
            double l_right = Range.clip(0.15D - l_angle, -1.0D, 1.0D);
            this.set_drive_power(l_left, l_right);
            l_return1 = 0;
        } else if(l_strength <= 0.0D) {
            this.set_drive_power(0.0D, 0.0D);
            l_return1 = -2;
        } else {
            this.set_drive_power(0.0D, 0.0D);
            l_return1 = 1;
        }

        return l_return1;
    }

    double a_ods_light_detected() {
        double l_return = 0.0D;
        if(this.v_sensor_ods != null) {
            this.v_sensor_ods.getLightDetected();
        }

        return l_return;
    }

    boolean a_ods_white_tape_detected() {
        boolean l_return = false;
        if(this.v_sensor_ods != null && this.v_sensor_ods.getLightDetected() > 0.8D) {
            l_return = true;
        }

        return l_return;
    }
}
