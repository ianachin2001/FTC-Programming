//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor.Direction;
import com.qualcomm.robotcore.hardware.DcMotorController.DeviceMode;
import com.qualcomm.robotcore.hardware.DcMotorController.RunMode;
import com.qualcomm.robotcore.util.Range;

public class NxtTeleOp extends OpMode {
    double clawPosition;
    double clawDelta = 0.01D;
    double wristPosition;
    double wristDelta = 0.01D;
    DeviceMode devMode;
    DcMotorController wheelController;
    DcMotor motorRight;
    DcMotor motorLeft;
    Servo claw;
    Servo wrist;
    int numOpLoops = 1;

    public NxtTeleOp() {
    }

    public void init() {
        this.motorRight = (DcMotor)this.hardwareMap.dcMotor.get("motor_2");
        this.motorLeft = (DcMotor)this.hardwareMap.dcMotor.get("motor_1");
        this.claw = (Servo)this.hardwareMap.servo.get("servo_6");
        this.wrist = (Servo)this.hardwareMap.servo.get("servo_1");
        this.wheelController = (DcMotorController)this.hardwareMap.dcMotorController.get("wheels");
    }

    public void init_loop() {
        this.devMode = DeviceMode.WRITE_ONLY;
        this.motorRight.setDirection(Direction.REVERSE);
        this.motorLeft.setChannelMode(RunMode.RUN_WITHOUT_ENCODERS);
        this.motorRight.setChannelMode(RunMode.RUN_WITHOUT_ENCODERS);
        this.wristPosition = 0.6D;
        this.clawPosition = 0.5D;
    }

    public void loop() {
        if(this.allowedToWrite()) {
            if(this.gamepad1.dpad_left) {
                this.motorLeft.setChannelMode(RunMode.RUN_WITHOUT_ENCODERS);
                this.motorRight.setChannelMode(RunMode.RUN_WITHOUT_ENCODERS);
            }

            if(this.gamepad1.dpad_right) {
                this.motorLeft.setChannelMode(RunMode.RUN_USING_ENCODERS);
                this.motorRight.setChannelMode(RunMode.RUN_USING_ENCODERS);
            }

            float throttle = -this.gamepad1.left_stick_y;
            float direction = this.gamepad1.left_stick_x;
            float right = throttle - direction;
            float left = throttle + direction;
            right = Range.clip(right, -1.0F, 1.0F);
            left = Range.clip(left, -1.0F, 1.0F);
            this.motorRight.setPower((double)right);
            this.motorLeft.setPower((double)left);
            if(this.gamepad1.a) {
                this.wristPosition -= this.wristDelta;
            }

            if(this.gamepad1.y) {
                this.wristPosition += this.wristDelta;
            }

            if(this.gamepad1.x) {
                this.clawPosition -= this.clawDelta;
            }

            if(this.gamepad1.b) {
                this.clawPosition += this.clawDelta;
            }

            this.wristPosition = Range.clip(this.wristPosition, 0.0D, 1.0D);
            this.clawPosition = Range.clip(this.clawPosition, 0.0D, 1.0D);
            this.wrist.setPosition(this.wristPosition);
            this.claw.setPosition(this.clawPosition);
            if(!this.gamepad2.atRest()) {
                throttle = this.gamepad2.right_trigger;
                if((double)this.gamepad2.left_trigger != 0.0D) {
                    throttle = -this.gamepad2.left_trigger;
                }

                right = throttle;
                left = throttle;
                if(this.gamepad2.left_stick_x < 0.0F) {
                    left = throttle * (1.0F + this.gamepad2.left_stick_x);
                }

                if(this.gamepad2.left_stick_x > 0.0F) {
                    right = throttle * (1.0F - this.gamepad2.left_stick_x);
                }

                this.motorRight.setPower((double)right);
                this.motorLeft.setPower((double)left);
            }
        }

        if(this.numOpLoops % 17 == 0) {
            this.wheelController.setMotorControllerDeviceMode(DeviceMode.READ_ONLY);
        }

        if(this.wheelController.getMotorControllerDeviceMode() == DeviceMode.READ_ONLY) {
            this.telemetry.addData("Text", "free flow text");
            this.telemetry.addData("left motor", this.motorLeft.getPower());
            this.telemetry.addData("right motor", this.motorRight.getPower());
            this.telemetry.addData("RunMode: ", this.motorLeft.getChannelMode().toString());
            this.wheelController.setMotorControllerDeviceMode(DeviceMode.WRITE_ONLY);
            this.numOpLoops = 0;
        }

        this.devMode = this.wheelController.getMotorControllerDeviceMode();
        ++this.numOpLoops;
    }

    private boolean allowedToWrite() {
        return this.devMode == DeviceMode.WRITE_ONLY;
    }
}
