//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.qualcomm.ftcrobotcontroller.opmodes;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;
import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DeviceInterfaceModule;
import com.qualcomm.robotcore.hardware.DigitalChannelController.Mode;

public class AdafruitRGBExample extends LinearOpMode {
    ColorSensor sensorRGB;
    DeviceInterfaceModule cdim;
    static final int LED_CHANNEL = 5;

    public AdafruitRGBExample() {
    }

    public void runOpMode() throws InterruptedException {
        this.hardwareMap.logDevices();
        this.cdim = (DeviceInterfaceModule)this.hardwareMap.deviceInterfaceModule.get("dim");
        this.cdim.setDigitalChannelMode(5, Mode.OUTPUT);
        this.sensorRGB = (ColorSensor)this.hardwareMap.colorSensor.get("color");
        boolean bEnabled = true;
        this.cdim.setDigitalChannelState(5, bEnabled);
        this.waitOneFullHardwareCycle();
        this.waitForStart();
        float[] hsvValues = new float[]{0.0F, 0.0F, 0.0F};
        final float[] values = hsvValues;
        final View relativeLayout = ((Activity)this.hardwareMap.appContext).findViewById(2131427353);
        boolean bPrevState = false;
        boolean bCurrState = false;

        while(this.opModeIsActive()) {
            bCurrState = this.gamepad1.x || this.gamepad2.x;
            if(bCurrState && bCurrState != bPrevState) {
                DbgLog.msg("MY_DEBUG - x button was pressed!");
                bPrevState = bCurrState;
                bEnabled = true;
                this.cdim.setDigitalChannelState(5, bEnabled);
            } else if(!bCurrState && bCurrState != bPrevState) {
                DbgLog.msg("MY_DEBUG - x button was released!");
                bPrevState = bCurrState;
                bEnabled = false;
                this.cdim.setDigitalChannelState(5, bEnabled);
            }

            Color.RGBToHSV(this.sensorRGB.red() * 255 / 800, this.sensorRGB.green() * 255 / 800, this.sensorRGB.blue() * 255 / 800, hsvValues);
            this.telemetry.addData("Clear", (float)this.sensorRGB.alpha());
            this.telemetry.addData("Red  ", (float)this.sensorRGB.red());
            this.telemetry.addData("Green", (float)this.sensorRGB.green());
            this.telemetry.addData("Blue ", (float)this.sensorRGB.blue());
            this.telemetry.addData("Hue", hsvValues[0]);
            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(255, values));
                }
            });
            this.waitOneFullHardwareCycle();
        }

    }
}
