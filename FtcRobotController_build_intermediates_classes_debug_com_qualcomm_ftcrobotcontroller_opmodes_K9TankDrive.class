//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor.Direction;
import com.qualcomm.robotcore.util.Range;

public class K9TankDrive extends OpMode {
    static final double ARM_MIN_RANGE = 0.2D;
    static final double ARM_MAX_RANGE = 0.9D;
    static final double CLAW_MIN_RANGE = 0.2D;
    static final double CLAW_MAX_RANGE = 0.7D;
    double armPosition;
    double armDelta = 0.1D;
    double clawPosition;
    double clawDelta = 0.1D;
    DcMotor motorRight;
    DcMotor motorLeft;
    Servo claw;
    Servo arm;

    public K9TankDrive() {
    }

    public void init() {
        this.motorRight = (DcMotor)this.hardwareMap.dcMotor.get("motor_2");
        this.motorLeft = (DcMotor)this.hardwareMap.dcMotor.get("motor_1");
        this.motorLeft.setDirection(Direction.REVERSE);
        this.arm = (Servo)this.hardwareMap.servo.get("servo_1");
        this.claw = (Servo)this.hardwareMap.servo.get("servo_6");
        this.armPosition = 0.2D;
        this.clawPosition = 0.2D;
    }

    public void loop() {
        float left = -this.gamepad1.left_stick_y;
        float right = -this.gamepad1.right_stick_y;
        right = Range.clip(right, -1.0F, 1.0F);
        left = Range.clip(left, -1.0F, 1.0F);
        right = (float)this.scaleInput((double)right);
        left = (float)this.scaleInput((double)left);
        this.motorRight.setPower((double)right);
        this.motorLeft.setPower((double)left);
        if(this.gamepad1.a) {
            this.armPosition += this.armDelta;
        }

        if(this.gamepad1.y) {
            this.armPosition -= this.armDelta;
        }

        if(this.gamepad1.left_bumper) {
            this.clawPosition += this.clawDelta;
        }

        if((double)this.gamepad1.left_trigger > 0.25D) {
            this.clawPosition -= this.clawDelta;
        }

        if(this.gamepad1.b) {
            this.clawPosition -= this.clawDelta;
        }

        if(this.gamepad1.x) {
            this.clawPosition += this.clawDelta;
        }

        if(this.gamepad1.b) {
            this.clawPosition -= this.clawDelta;
        }

        this.armPosition = Range.clip(this.armPosition, 0.2D, 0.9D);
        this.clawPosition = Range.clip(this.clawPosition, 0.2D, 0.7D);
        this.arm.setPosition(this.armPosition);
        this.claw.setPosition(this.clawPosition);
        this.telemetry.addData("Text", "*** Robot Data***");
        this.telemetry.addData("arm", "arm:  " + String.format("%.2f", new Object[]{Double.valueOf(this.armPosition)}));
        this.telemetry.addData("claw", "claw:  " + String.format("%.2f", new Object[]{Double.valueOf(this.clawPosition)}));
        this.telemetry.addData("left tgt pwr", "left  pwr: " + String.format("%.2f", new Object[]{Float.valueOf(left)}));
        this.telemetry.addData("right tgt pwr", "right pwr: " + String.format("%.2f", new Object[]{Float.valueOf(right)}));
    }

    public void stop() {
    }

    double scaleInput(double dVal) {
        double[] scaleArray = new double[]{0.0D, 0.05D, 0.09D, 0.1D, 0.12D, 0.15D, 0.18D, 0.24D, 0.3D, 0.36D, 0.43D, 0.5D, 0.6D, 0.72D, 0.85D, 1.0D, 1.0D};
        int index = (int)(dVal * 16.0D);
        if(index < 0) {
            index = -index;
        }

        if(index > 16) {
            index = 16;
        }

        double dScale = 0.0D;
        if(dVal < 0.0D) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        return dScale;
    }
}
